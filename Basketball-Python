import tkinter as tk
import time
import csv
import RPi.GPIO as GPIO
from time import sleep
import threading

# GPIO-Setup
GPIO.setmode(GPIO.BCM)
GPIO.setup(20, GPIO.IN)
GPIO.setup(19, GPIO.IN)


class BasketballGame(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.pack()
        self.csv_file_path = '/var/www/html/results.csv'
        self.results = []
        self.ball_count = 0
        self.start_time = 0
        self.player_name = tk.StringVar()
        self.create_widgets()
        self.sensor_thread = None
        self.count_thread = None
        self.running = False
        self.abbrechen = False

    def create_widgets(self):
        # Text Label
        self.player_name_label = tk.Label(self, text="Wer will spielen?", font=("Helvetica", 18))
        self.player_name_label.pack(pady=10)

        # Textfeld
        self.player_name_entry = tk.Entry(self, textvariable=self.player_name, font=("Helvetica", 18))
        self.player_name_entry.pack(pady=10)

        # Start Button
        self.start_button = tk.Button(self, text="Start", font=("Helvetica", 18), command=self.start_game)
        self.start_button.pack(pady=10)

        # Countdown-Anzeige
        self.countdown_label = tk.Label(self, text="10", font=("Courier", 80, "bold"), fg='red')
        self.countdown_label.pack(pady=10)

        # Zeit-Anzeige
        self.time_label = tk.Label(self, text="60.0", font=("Courier", 80, "bold"), fg='red')
        self.time_label.pack(pady=10)

        # Ball Count-Anzeige
        self.ball_count_label = tk.Label(self, text="0", font=("Courier", 80, "bold"), fg='red')
        self.ball_count_label.pack(pady=10)
        
        # Abbrechen Button
        self.abbrechen_button = tk.Button(self, text="Abbrechen", font=("Helvetica", 18), command=self.abbrechen)
        self.abbrechen_button.pack(pady=10)
        
        # Beenden Button
        self.beenden_button = tk.Button(self, text="Beenden", font=("Helvetica", 18), command=self.quit_game)
        self.beenden_button.pack(pady=10)


    def start_game(self):
        if self.running == False:
                player_name = self.player_name.get()
                self.time_label.config(text="10")
                self.time_label.config(text="60.0")
                self.ball_count = 0
                self.ball_count_label.config(text=f"{self.ball_count}")
                self.master.update_idletasks()
                self.after(500, self.show_ready_message)
                self.running = True
                self.abbrechen = False


    def show_ready_message(self):
        self.master.update_idletasks()
        self.after(1000, self.countdown_step, 9)

    def countdown_step(self, remaining_time):
        if remaining_time <= 0:
            self.start_countdown()
        else:
            self.countdown_label.config(text=f"{remaining_time}")
            self.master.update_idletasks()
            self.after(1000, self.countdown_step, remaining_time - 1)

    def start_countdown(self):
        self.countdown_label.config(text="Los!")
        self.master.update_idletasks()
        self.start_time = time.time()
        self.ball_count = 0 
        self.sensor_thread = threading.Thread(target=self.check_sensor)
        self.sensor_thread.daemon = True
        self.sensor_thread.start()
        self.count_thread = threading.Thread(target=self.update_ball_count) 
        self.count_thread.daemon = True
        self.count_thread.start()

    def update_ball_count(self):
        remaining_time = 60 - (time.time() - self.start_time)
        if self.running == False:
                remaining_time = 0
                
        if remaining_time > 0:
            self.time_label.config(text=f"{remaining_time:04.1f}")
            self.master.update_idletasks()
            self.after(100, self.update_ball_count) 
        
        elif self.abbrechen == True:
            self.countdown_label.config(text="10")
            self.time_label.config(text="60.0")
            self.ball_count = 0
            self.ball_count_label.config(text=f"{self.ball_count}")

        else:
            self.countdown_label.config(text="Zu Ende")
            self.time_label.config(text="00.0")
            self.ball_count_label.config(text=f"{self.ball_count} mal getroffen!")
            self.results.append((self.player_name.get(), self.ball_count))
            self.save_results()

    def check_sensor(self):
        while True:
            if self.running == False:
                    remaining_time = 0
                    break
            else:
                remaining_time = 60 - int(time.time() - self.start_time)
            zeit = False
            timebraek = False

            while GPIO.input(19) == 1 and remaining_time >0 and self.running == True:
                    remaining_time = 60 - int(time.time() - self.start_time)
        

            self.first_sensor_triggered_time = time.time()

            while GPIO.input(20) == 1 and not timebraek and self.running == True:
                if time.time() - self.first_sensor_triggered_time >= 2:
                    timebraek = True
                
            if time.time() - self.first_sensor_triggered_time <= 2:
                zeit = True
                
                
            if zeit == True and GPIO.input(19) == 1:
                self.ball_count += 1
                self.ball_count_label.config(text=f"{self.ball_count}")
                self.master.update_idletasks()
                sleep(0.5)

            zeit = False
            timebraek = False

            if remaining_time > 0: 
                sleep(0.5)
            else:
                break

    def save_results(self):
        with open(self.csv_file_path, mode='a', encoding='utf-8', newline='') as csv_file:
            writer = csv.writer(csv_file, dialect='excel', delimiter=';')
            writer.writerow([self.player_name.get(), self.ball_count])
        self.running = False
        
    def abbrechen(self):
            self.running = False
            self.abbrechen = True 

    def quit_game(self):
        self.save_results()
        self.master.destroy()

root = tk.Tk()
root.title("Basketball Game")
root.geometry("1200x600")
app = BasketballGame(master=root)
app.mainloop()
